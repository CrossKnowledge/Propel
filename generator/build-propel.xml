<project name="propel" default="main">

    <!--
      Note - You should not have to edit this file.

      Instead, if calling build-propel.xml directly, edit the build.properties
      that is in the same directory. If calling build-propel.xml via another
      build file, you can also use the build.properties in the same directory,
      or set the property propel.contextProperties to the file
      to use in place of build.properties (e.g. project.properties).
    -->

    <property name="build.properties" value="build.properties"/>
    <property name="propel.contextProperties" value="./${build.properties}"/>
    <property name="propel.home" value="."/>

    <available file="${propel.home}/build.properties" property="globalBuildPopertiesExists"/>

    <if>
        <and>
            <isset property="globalBuildPopertiesExists"/>
        </and>
        <then>
            <property file="${propel.home}/build.properties"/>
        </then>
    </if>

    <!--
      The default.properties file will map old properties to the new ones along
      with setting the correct defaults.
    -->
    <property file="${propel.home}/default.properties"/>

    <!--
      Load the bootstrap file AFTER properties are set
      This should set up the autoloader for namespaced classes
    -->
    <php expression="require_once '${propel.home}/lib/bootstrap.php';"/>

    <!--
      Load the Phing-specific autoloader for better compatibility
    -->
    <php expression="require_once '${propel.home}/lib/phing-autoloader.php';"/>

    <!--
      Do forward declarations of all of our tasks to
      centralize them and clean up the targets.

      IMPORTANT: With namespaces, we need to use fully qualified class names
      and ensure the autoloader is properly configured in bootstrap.php
    -->

    <taskdef
            name="propel-om"
            classname="CK\Generator\Lib\Task\PropelOMTask"/>
    <taskdef
            name="propel-data-dump"
            classname="CK\Generator\Lib\Task\PropelDataDumpTask"/>
    <taskdef
            name="propel-data-sql"
            classname="CK\Generator\Lib\Task\PropelDataSQLTask"/>
    <taskdef
            name="propel-schema-reverse"
            classname="CK\Generator\Lib\Task\PropelSchemaReverseTask"/>
    <taskdef
            name="propel-sql"
            classname="CK\Generator\Lib\Task\PropelSQLTask"/>
    <taskdef
            name="propel-sql-diff"
            classname="CK\Generator\Lib\Task\PropelSQLDiffTask"/>
    <taskdef
            name="propel-migration-status"
            classname="CK\Generator\Lib\Task\PropelMigrationStatusTask"/>
    <taskdef
            name="propel-migration-up"
            classname="CK\Generator\Lib\Task\PropelMigrationUpTask"/>
    <taskdef
            name="propel-migration-down"
            classname="CK\Generator\Lib\Task\PropelMigrationDownTask"/>
    <taskdef
            name="propel-migration"
            classname="CK\Generator\Lib\Task\PropelMigrationTask"/>
    <taskdef
            name="propel-sql-exec"
            classname="CK\Generator\Lib\Task\PropelSQLExec"/>
    <taskdef
            name="propel-graphviz"
            classname="CK\Generator\Lib\Task\PropelGraphvizTask"/>
    <taskdef
            name="propel-convert-conf"
            classname="CK\Generator\Lib\Task\PropelConvertConfTask"/>
    <taskdef
            name="propel-build-sql"
            classname="CK\Generator\Lib\Task\PropelSqlBuildTask"/>

    <!-- Rest of the file remains the same... -->

    <!-- M A I N  T A R G E T -->
    <target
            name="main"
            depends="mysqli-check"
            description="==> generates sql + om classes">

        <phingcall target="sql"/>
        <phingcall target="om"/>
        <phingcall target="convert-conf"/>
    </target>

    <!-- C H E C K  R U N  O N L Y  O N  S C H E M A  C H A N G E -->
    <target name="check-run-only-on-schema-change">
        <condition property="propel.internal.runOnlyOnSchemaChange">
            <equals arg1="${propel.runOnlyOnSchemaChange}" arg2="true"/>
        </condition>
    </target>

    <!-- G E N E R A T E  P R O J E C T  S Q L -->
    <target
            name="sql-check"
            depends="check-run-only-on-schema-change"
            if="propel.internal.runOnlyOnSchemaChange">
        <uptodate
                property="propel.internal.sql.uptodate"
                targetfile="${propel.sql.dir}/${propel.schema.default.basename}.sql">
            <srcfiles dir="${propel.schema.dir}" includes="**/${propel.schema.default.basename}.xml"/>
        </uptodate>
    </target>

    <!-- mysqli check target -->
    <target name="mysqli-check">
        <if>
            <and>
                <equals arg1="${propel.database}" arg2="mysqli"/>
            </and>
            <then>
                <warn>ATTENTION: It appears you are using the mysqli driver.</warn>
                <warn></warn>
                <warn>This driver is no longer supported by Propel because Propel now uses PDO for database
                    connections.
                </warn>
                <warn>Please use mysqli driver instead.</warn>
                <fail>Use 'mysql' instead of 'mysqli' for your propel.database property.</fail>
            </then>
        </if>
    </target>

    <target
            name="sql"
            depends="sql-check,mysqli-check"
            unless="propel.internal.sql.uptodate"
            description="==> generates the SQL for your project">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="| Generating SQL for YOUR Propel project!  |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>

        <phingcall target="sql-template"/>

    </target>

    <target name="sql-template">
        <propel-sql
                validate="${propel.schema.validate}"
                xsd="${propel.schema.xsd.file}"
                xsl="${propel.schema.xsl.file}"
                outputDirectory="${propel.sql.dir}"
                sqldbmap="${propel.sql.dir}/sqldb.map"
                targetDatabase="${propel.database}"
                packageObjectModel="${propel.packageObjectModel}"
                url="${propel.database.url}"
                userId="${propel.database.user}"
                password="${propel.database.password}">
            <mapper type="glob" from="${propel.sql.mapper.from}" to="${propel.sql.mapper.to}"/>
            <schemafileset dir="${propel.schema.dir}"
                           includes="${propel.schema.sql.includes}"
                           excludes="${propel.schema.sql.excludes}"
            />
        </propel-sql>
    </target>

    <!-- G E N E R A T E  P R O J E C T  P E E R  B A S E D  O M -->
    <target
            name="om-check"
            depends="check-run-only-on-schema-change"
            if="propel.internal.runOnlyOnSchemaChange">
        <uptodate
                property="propel.internal.om.uptodate"
                targetfile="${propel.php.dir}/report.${propel.project}.om.generation">
            <srcfiles dir="${propel.schema.dir}" includes="**/${propel.schema.om.includes}.xml"/>
        </uptodate>
    </target>

    <target
            name="om"
            depends="om-check,mysqli-check"
            unless="propel.internal.om.uptodate"
            description="==> generates the Peer-based object model for your project">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="| Generating Peer-based Object Model for   |"/>
        <echo message="| YOUR Propel project!                     |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>

        <phingcall target="om-template"/>
    </target>

    <target name="om-template">
        <propel-om
                validate="${propel.schema.validate}"
                xsd="${propel.schema.xsd.file}"
                xsl="${propel.schema.xsl.file}"
                outputDirectory="${propel.php.dir}"
                targetDatabase="${propel.database}"
                targetPackage="${propel.targetPackage}"
                targetPlatform="${propel.targetPlatform}"
                packageObjectModel="${propel.packageObjectModel}">
            <schemafileset dir="${propel.schema.dir}"
                           includes="${propel.schema.om.includes}"
                           excludes="${propel.schema.om.excludes}"
            />
        </propel-om>
    </target>

    <!-- X M L   R U N T I M E   C O N F   T O   P H P   A R R A Y -->
    <target
            name="convert-conf"
            description="==> converts properties file to PHP array">

        <echo message="+------------------------------------------+"/>
        <echo message="|                                          |"/>
        <echo message="| Converting runtime config file to an     |"/>
        <echo message="| array dump for improved performance.     |"/>
        <echo message="|                                          |"/>
        <echo message="+------------------------------------------+"/>

        <propel-convert-conf
                targetDatabase="${propel.database}"
                xsd="${propel.schema.xsd.file}"
                xsl="${propel.schema.xsl.file}"
                xmlConfFile="${propel.conf.dir}/${propel.runtime.conf.file}"
                outputDirectory="${propel.phpconf.dir}"
                outputFile="${propel.runtime.phpconf.file}"
                outputClassmapFile="${propel.runtime.phpconf-classmap.file}"
                packageObjectModel="${propel.packageObjectModel}">
            <schemafileset dir="${propel.schema.dir}"
                           includes="${propel.schema.sql.includes}"
                           excludes="${propel.schema.sql.excludes}"
            />
        </propel-convert-conf>

    </target>

</project>